#!/bin/bash

# ============================================================================
# Ninja DNS - –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
# ============================================================================
# 
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
# –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –∫—Ä–∞—Å–∏–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
#
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   ./monitor.sh                # –ü–æ–ª–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
#   ./monitor.sh --compact      # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º
#   ./monitor.sh --alerts-only  # –¢–æ–ª—å–∫–æ –∞–ª–µ—Ä—Ç—ã
#
# ============================================================================

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
BOLD='\033[1m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ENV_FILE="$SCRIPT_DIR/.env"
REFRESH_INTERVAL=5
COMPACT_MODE=false
ALERTS_ONLY=false

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_config() {
    if [[ -f "$ENV_FILE" ]]; then
        source "$ENV_FILE"
    else
        echo -e "${RED}‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        exit 1
    fi
}

# –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É—Ä—Å–æ—Ä–∞
clear_screen() {
    clear
    tput cup 0 0
}

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
print_header() {
    echo -e "${BOLD}${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${BOLD}${BLUE}üåä Ninja DNS - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏${NC}"
    echo -e "${BOLD}${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${CYAN}–î–æ–º–µ–Ω: ${HOST_DOMAIN} | IP: ${SERVER_IP} | –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ ${REFRESH_INTERVAL}—Å${NC}"
    echo -e "${CYAN}–í—Ä–µ–º—è: $(date) | –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞${NC}"
    echo -e "${BOLD}${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo
}

# –°—Ç–∞—Ç—É—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
status_indicator() {
    local status="$1"
    case "$status" in
        "UP"|"running"|"PASS")
            echo -e "${GREEN}‚óè${NC}"
            ;;
        "DOWN"|"exited"|"FAIL")
            echo -e "${RED}‚óè${NC}"
            ;;
        "WARN"|"WARNING")
            echo -e "${YELLOW}‚óè${NC}"
            ;;
        *)
            echo -e "${YELLOW}?${NC}"
            ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
check_containers() {
    local compose_cmd="docker compose"
    if ! docker compose version &> /dev/null; then
        compose_cmd="docker-compose"
    fi
    
    echo -e "${BOLD}üê≥ Docker –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:${NC}"
    
    local services=("traefik" "smartdns" "sniproxy" "doh-proxy" "admin")
    local all_up=true
    
    for service in "${services[@]}"; do
        local status=$($compose_cmd ps "$service" 2>/dev/null | grep "$service" | awk '{print $NF}' || echo "DOWN")
        local indicator=$(status_indicator "$status")
        
        if [[ "$COMPACT_MODE" == false ]]; then
            printf "  %-12s %s %s\n" "$service" "$indicator" "$status"
        fi
        
        if [[ "$status" != "Up" && "$status" != "running" ]]; then
            all_up=false
            if [[ "$ALERTS_ONLY" == true ]]; then
                echo -e "${RED}üö® –ê–õ–ï–†–¢: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $service –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ($status)${NC}"
            fi
        fi
    done
    
    if [[ "$COMPACT_MODE" == true ]]; then
        if [[ "$all_up" == true ]]; then
            echo -e "  –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: ${GREEN}‚óè UP${NC}"
        else
            echo -e "  –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: ${RED}‚óè –ü–†–û–ë–õ–ï–ú–´${NC}"
        fi
    fi
    
    echo
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
check_network() {
    echo -e "${BOLD}üåç –°–µ—Ç–µ–≤—ã–µ –°–µ—Ä–≤–∏—Å—ã:${NC}"
    
    # HTTP
    local http_status="DOWN"
    if curl -s -I --connect-timeout 3 "http://$HOST_DOMAIN" | grep -q "HTTP"; then
        http_status="UP"
    fi
    local http_indicator=$(status_indicator "$http_status")
    
    # HTTPS
    local https_status="DOWN"
    local https_time=""
    if https_time=$(curl -s -o /dev/null -w "%{time_total}" --connect-timeout 3 "https://$HOST_DOMAIN" 2>/dev/null); then
        https_status="UP"
        https_time=$(echo "$https_time * 1000" | bc -l 2>/dev/null | cut -d. -f1 || echo "999")
    fi
    local https_indicator=$(status_indicator "$https_status")
    
    # DNS
    local dns_status="DOWN"
    local dns_time=""
    local start_time=$(date +%s%N)
    if nslookup google.com "$SERVER_IP" &> /dev/null; then
        dns_status="UP"
        local end_time=$(date +%s%N)
        dns_time=$(( (end_time - start_time) / 1000000 ))
    fi
    local dns_indicator=$(status_indicator "$dns_status")
    
    if [[ "$COMPACT_MODE" == false ]]; then
        printf "  %-12s %s %s\n" "HTTP" "$http_indicator" "$http_status"
        printf "  %-12s %s %s" "HTTPS" "$https_indicator" "$https_status"
        [[ -n "$https_time" ]] && printf " (%sms)" "$https_time"
        echo
        printf "  %-12s %s %s" "DNS" "$dns_indicator" "$dns_status"
        [[ -n "$dns_time" ]] && printf " (%sms)" "$dns_time"
        echo
    else
        local network_ok=true
        [[ "$http_status" != "UP" ]] && network_ok=false
        [[ "$https_status" != "UP" ]] && network_ok=false
        [[ "$dns_status" != "UP" ]] && network_ok=false
        
        if [[ "$network_ok" == true ]]; then
            echo -e "  –°–µ—Ç—å: ${GREEN}‚óè –í–°–ï –û–ö${NC} (DNS:${dns_time}ms, HTTPS:${https_time}ms)"
        else
            echo -e "  –°–µ—Ç—å: ${RED}‚óè –ü–†–û–ë–õ–ï–ú–´${NC}"
        fi
    fi
    
    # –ê–ª–µ—Ä—Ç—ã
    if [[ "$ALERTS_ONLY" == true ]]; then
        [[ "$http_status" != "UP" ]] && echo -e "${RED}üö® –ê–õ–ï–†–¢: HTTP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
        [[ "$https_status" != "UP" ]] && echo -e "${RED}üö® –ê–õ–ï–†–¢: HTTPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
        [[ "$dns_status" != "UP" ]] && echo -e "${RED}üö® –ê–õ–ï–†–¢: DNS –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç${NC}"
        [[ -n "$dns_time" && $dns_time -gt 500 ]] && echo -e "${YELLOW}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ú–µ–¥–ª–µ–Ω–Ω—ã–π DNS (${dns_time}ms)${NC}"
        [[ -n "$https_time" && $https_time -gt 2000 ]] && echo -e "${YELLOW}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ú–µ–¥–ª–µ–Ω–Ω—ã–π HTTPS (${https_time}ms)${NC}"
    fi
    
    echo
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
check_ssl() {
    if [[ "$COMPACT_MODE" == true ]]; then
        return 0
    fi
    
    echo -e "${BOLD}üîí SSL –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç:${NC}"
    
    local cert_status="UNKNOWN"
    local days_left="?"
    
    if openssl s_client -connect "$HOST_DOMAIN:443" -servername "$HOST_DOMAIN" < /dev/null 2>/dev/null | openssl x509 -noout -dates > /tmp/cert_info 2>/dev/null; then
        local not_after=$(grep "notAfter" /tmp/cert_info | cut -d= -f2)
        local expiry_date=$(date -d "$not_after" +%s 2>/dev/null || echo "0")
        local current_date=$(date +%s)
        days_left=$(( (expiry_date - current_date) / 86400 ))
        
        if [[ $days_left -gt 30 ]]; then
            cert_status="VALID"
        elif [[ $days_left -gt 7 ]]; then
            cert_status="WARN"
        else
            cert_status="CRITICAL"
        fi
    else
        cert_status="ERROR"
    fi
    
    local cert_indicator=$(status_indicator "$cert_status")
    printf "  %-12s %s %s" "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç" "$cert_indicator" "$cert_status"
    [[ "$days_left" != "?" ]] && printf " (%s –¥–Ω–µ–π)" "$days_left"
    echo
    
    # –ê–ª–µ—Ä—Ç—ã –¥–ª—è SSL
    if [[ "$ALERTS_ONLY" == true ]]; then
        [[ "$cert_status" == "ERROR" ]] && echo -e "${RED}üö® –ê–õ–ï–†–¢: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞${NC}"
        [[ "$cert_status" == "CRITICAL" ]] && echo -e "${RED}üö® –ê–õ–ï–†–¢: SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $days_left –¥–Ω–µ–π${NC}"
        [[ "$cert_status" == "WARN" ]] && echo -e "${YELLOW}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $days_left –¥–Ω–µ–π${NC}"
    fi
    
    echo
}

# –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
check_resources() {
    echo -e "${BOLD}üíª –°–∏—Å—Ç–µ–º–Ω—ã–µ –†–µ—Å—É—Ä—Å—ã:${NC}"
    
    # –ü–∞–º—è—Ç—å
    local mem_info=$(free -m | awk '/^Mem:/{printf "%.1f/%.1fGB (%.0f%%)", $3/1024, $2/1024, $3*100/$2}')
    local mem_percent=$(free | awk '/^Mem:/{printf "%.0f", $3*100/$2}')
    local mem_indicator
    if [[ $mem_percent -lt 80 ]]; then
        mem_indicator=$(status_indicator "UP")
    elif [[ $mem_percent -lt 90 ]]; then
        mem_indicator=$(status_indicator "WARN")
    else
        mem_indicator=$(status_indicator "DOWN")
    fi
    
    # –î–∏—Å–∫
    local disk_info=$(df -h "$SCRIPT_DIR" | awk 'NR==2 {printf "%s/%s (%s)", $3, $2, $5}')
    local disk_percent=$(df "$SCRIPT_DIR" | awk 'NR==2 {print $5}' | sed 's/%//')
    local disk_indicator
    if [[ $disk_percent -lt 80 ]]; then
        disk_indicator=$(status_indicator "UP")
    elif [[ $disk_percent -lt 90 ]]; then
        disk_indicator=$(status_indicator "WARN")
    else
        disk_indicator=$(status_indicator "DOWN")
    fi
    
    # CPU Load
    local load_avg=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
    local cpu_cores=$(nproc)
    local load_percent=$(echo "scale=0; $load_avg * 100 / $cpu_cores" | bc -l 2>/dev/null || echo "0")
    local load_indicator
    if [[ $load_percent -lt 70 ]]; then
        load_indicator=$(status_indicator "UP")
    elif [[ $load_percent -lt 90 ]]; then
        load_indicator=$(status_indicator "WARN")
    else
        load_indicator=$(status_indicator "DOWN")
    fi
    
    if [[ "$COMPACT_MODE" == false ]]; then
        printf "  %-12s %s %s\n" "–ü–∞–º—è—Ç—å" "$mem_indicator" "$mem_info"
        printf "  %-12s %s %s\n" "–î–∏—Å–∫" "$disk_indicator" "$disk_info"
        printf "  %-12s %s %s\n" "–ù–∞–≥—Ä—É–∑–∫–∞" "$load_indicator" "${load_avg} (${load_percent}%)"
    else
        local resources_ok=true
        [[ $mem_percent -gt 90 ]] && resources_ok=false
        [[ $disk_percent -gt 90 ]] && resources_ok=false
        [[ $load_percent -gt 90 ]] && resources_ok=false
        
        if [[ "$resources_ok" == true ]]; then
            echo -e "  –†–µ—Å—É—Ä—Å—ã: ${GREEN}‚óè –ù–û–†–ú–ê${NC} (RAM:${mem_percent}%, –î–∏—Å–∫:${disk_percent}%, CPU:${load_percent}%)"
        else
            echo -e "  –†–µ—Å—É—Ä—Å—ã: ${YELLOW}‚óè –ù–ê–ì–†–£–ó–ö–ê${NC} (RAM:${mem_percent}%, –î–∏—Å–∫:${disk_percent}%, CPU:${load_percent}%)"
        fi
    fi
    
    # –ê–ª–µ—Ä—Ç—ã –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤
    if [[ "$ALERTS_ONLY" == true ]]; then
        [[ $mem_percent -gt 90 ]] && echo -e "${RED}üö® –ê–õ–ï–†–¢: –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (${mem_percent}%)${NC}"
        [[ $disk_percent -gt 90 ]] && echo -e "${RED}üö® –ê–õ–ï–†–¢: –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ (${disk_percent}%)${NC}"
        [[ $load_percent -gt 90 ]] && echo -e "${RED}üö® –ê–õ–ï–†–¢: –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ CPU (${load_percent}%)${NC}"
    fi
    
    echo
}

# Docker —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
check_docker_stats() {
    if [[ "$COMPACT_MODE" == true ]]; then
        return 0
    fi
    
    echo -e "${BOLD}üìä Docker –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:${NC}"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    local stats_output=$(docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}" 2>/dev/null | tail -n +2)
    
    if [[ -n "$stats_output" ]]; then
        echo "$stats_output" | while IFS=$'\t' read -r name cpu mem; do
            local cpu_num=$(echo "$cpu" | sed 's/%//')
            local cpu_indicator
            if [[ $(echo "$cpu_num < 50" | bc -l 2>/dev/null || echo 0) -eq 1 ]]; then
                cpu_indicator=$(status_indicator "UP")
            elif [[ $(echo "$cpu_num < 80" | bc -l 2>/dev/null || echo 0) -eq 1 ]]; then
                cpu_indicator=$(status_indicator "WARN")
            else
                cpu_indicator=$(status_indicator "DOWN")
            fi
            
            printf "  %-12s %s CPU: %s, RAM: %s\n" "$name" "$cpu_indicator" "$cpu" "$mem"
        done
    else
        echo -e "  ${YELLOW}–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö${NC}"
    fi
    
    echo
}

# –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
check_recent_events() {
    if [[ "$COMPACT_MODE" == true ]]; then
        return 0
    fi
    
    echo -e "${BOLD}üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –°–æ–±—ã—Ç–∏—è:${NC}"
    
    local compose_cmd="docker compose"
    if ! docker compose version &> /dev/null; then
        compose_cmd="docker-compose"
    fi
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å –æ—à–∏–±–∫–∞–º–∏
    local recent_errors=$($compose_cmd logs --since=1m 2>/dev/null | grep -i "error\|fail\|fatal" | tail -3)
    
    if [[ -n "$recent_errors" ]]; then
        echo -e "  ${RED}–ù–µ–¥–∞–≤–Ω–∏–µ –æ—à–∏–±–∫–∏:${NC}"
        echo "$recent_errors" | while read -r line; do
            echo -e "    ${RED}‚Ä¢${NC} $(echo "$line" | cut -c1-80)..."
        done
    else
        echo -e "  ${GREEN}‚úì –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ—à–∏–±–æ–∫${NC}"
    fi
    
    echo
}

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitor_loop() {
    while true; do
        clear_screen
        print_header
        
        check_containers
        check_network
        check_ssl
        check_resources
        check_docker_stats
        check_recent_events
        
        echo -e "${BOLD}${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
        echo -e "${CYAN}–°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${REFRESH_INTERVAL} —Å–µ–∫—É–Ω–¥... (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)${NC}"
        
        sleep "$REFRESH_INTERVAL"
    done
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    while [[ $# -gt 0 ]]; do
        case $1 in
            --compact)
                COMPACT_MODE=true
                shift
                ;;
            --alerts-only)
                ALERTS_ONLY=true
                shift
                ;;
            --interval)
                REFRESH_INTERVAL="$2"
                shift 2
                ;;
            --help|-h)
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–û–ü–¶–ò–ò]"
                echo
                echo "–û–ø—Ü–∏–∏:"
                echo "  --compact        –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                echo "  --alerts-only    –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–ª–µ—Ä—Ç—ã –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"
                echo "  --interval SEC   –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)"
                echo "  --help, -h       –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
                echo
                echo "–ü—Ä–∏–º–µ—Ä—ã:"
                echo "  $0               –ü–æ–ª–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
                echo "  $0 --compact     –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º"
                echo "  $0 --alerts-only –¢–æ–ª—å–∫–æ –∞–ª–µ—Ä—Ç—ã"
                echo
                echo "–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:"
                echo "  Ctrl+C           –í—ã—Ö–æ–¥"
                echo
                exit 0
                ;;
            *)
                echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
                echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
                exit 1
                ;;
        esac
    done
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if [[ ! -f "docker-compose.yml" ]]; then
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Ninja DNS${NC}"
        exit 1
    fi
    
    load_config
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    trap 'echo -e "\n${CYAN}–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${NC}"; exit 0' INT TERM
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    for cmd in docker curl nslookup bc; do
        if ! command -v "$cmd" &> /dev/null; then
            echo -e "${RED}‚ùå –û—à–∏–±–∫–∞: –ö–æ–º–∞–Ω–¥–∞ $cmd –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
            exit 1
        fi
    done
    
    monitor_loop
}

# –ó–∞–ø—É—Å–∫
main "$@"